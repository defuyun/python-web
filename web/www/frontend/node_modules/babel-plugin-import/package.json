{
  "_from": "babel-plugin-import",
  "_id": "babel-plugin-import@1.8.0",
  "_inBundle": false,
  "_integrity": "sha512-5Aw8aZnJPuhJdumK6mS2ZRlfmGaBIKm/h6dw5uS0bkRMTqwHespRG3NeN9x9TB4W38I16ZXGGlHHz+8Gt5/shQ==",
  "_location": "/babel-plugin-import",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "babel-plugin-import",
    "fetchSpec": "latest",
    "name": "babel-plugin-import",
    "raw": "babel-plugin-import",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/babel-plugin-import/-/babel-plugin-import-1.8.0.tgz",
  "_shasum": "260deddd78f6fea0d110e1d106ba72a518d3c88c",
  "_shrinkwrap": null,
  "_spec": "babel-plugin-import",
  "_where": "/home/os/Documents/python-web/web/www/frontend",
  "author": {
    "email": "sorrycc@gmail.com",
    "name": "chencheng"
  },
  "babel": {
    "presets": [
      [
        "umi",
        {
          "commonjs": true,
          "disableTransform": true
        }
      ]
    ]
  },
  "bugs": {
    "url": "https://github.com/ant-design/babel-plugin-import/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@babel/helper-module-imports": "^7.0.0-beta.34"
  },
  "deprecated": false,
  "description": "Component modular import plugin for babel.",
  "devDependencies": {
    "@babel/cli": "^7.0.0-beta.34",
    "@babel/core": "^7.0.0-beta.34",
    "@babel/polyfill": "^7.0.0-beta.34",
    "@babel/preset-react": "^7.0.0-beta.40",
    "@babel/register": "^7.0.0-beta.34",
    "babel-core": "^7.0.0-0",
    "babel-istanbul": "^0.12.2",
    "babel-preset-umi": "^0.2.0",
    "coveralls": "^2.11.6",
    "eslint": "^2.7.0",
    "eslint-config-airbnb": "^6.2.0",
    "expect": "^1.13.4",
    "material-ui": "^0.15.4",
    "mocha": "^2.3.4",
    "pre-commit": "~1.1.2",
    "react-toolbox": "^1.2.5"
  },
  "files": [
    "README.md",
    "lib",
    "package.json"
  ],
  "homepage": "https://github.com/ant-design/babel-plugin-import#readme",
  "keywords": [
    "antd",
    "babel-plugin"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "babel-plugin-import",
  "optionalDependencies": {},
  "pre-commit": [
    "lint"
  ],
  "readme": "# babel-plugin-import\n\nModular import plugin for babel, compatible with [antd](https://github.com/ant-design/ant-design), [antd-mobile](https://github.com/ant-design/ant-design-mobile), and so on.\n\n[![NPM version](https://img.shields.io/npm/v/babel-plugin-import.svg?style=flat)](https://npmjs.org/package/babel-plugin-import)\n[![Build Status](https://img.shields.io/travis/ant-design/babel-plugin-import.svg?style=flat)](https://travis-ci.org/ant-design/babel-plugin-import)\n\n----\n\n## Why babel-plugin-import\n\n- [English Instruction](https://ant.design/docs/react/getting-started#Import-on-Demand)\n- [中文说明](https://ant.design/docs/react/getting-started-cn#%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD)\n\n## Where to add babel-plugin-import\n\n- [babelrc](https://babeljs.io/docs/usage/babelrc/)\n- [babel-loader](https://github.com/babel/babel-loader)\n\n## Example\n\n#### `{ \"libraryName\": \"antd\" }`\n\n```javascript\nimport { Button } from 'antd';\nReactDOM.render(<Button>xxxx</Button>);\n\n      ↓ ↓ ↓ ↓ ↓ ↓\n      \nvar _button = require('antd/lib/button');\nReactDOM.render(<_button>xxxx</_button>);\n```\n\n#### `{ \"libraryName\": \"antd\", style: \"css\" }`\n\n```javascript\nimport { Button } from 'antd';\nReactDOM.render(<Button>xxxx</Button>);\n\n      ↓ ↓ ↓ ↓ ↓ ↓\n      \nvar _button = require('antd/lib/button');\nrequire('antd/lib/button/style/css');\nReactDOM.render(<_button>xxxx</_button>);\n```\n\n#### `{ \"libraryName\": \"antd\", style: true }`\n\n```javascript\nimport { Button } from 'antd';\nReactDOM.render(<Button>xxxx</Button>);\n\n      ↓ ↓ ↓ ↓ ↓ ↓\n      \nvar _button = require('antd/lib/button');\nrequire('antd/lib/button/style');\nReactDOM.render(<_button>xxxx</_button>);\n```\n\nNote : with `style: true` css source files are imported and optimizations can be done during compilation time. With `style: \"css\"`, pre bundled css files are imported as they are.  \n\n`style: true` can reduce the bundle size significantly, depending on your usage of the library.\n\n## Usage\n\n```bash\nnpm install babel-plugin-import --save-dev\n```\n\nVia `.babelrc` or babel-loader.\n\n```js\n{\n  \"plugins\": [[\"import\", options]]\n}\n```\n\n### options\n\n`options` can be object.\n\n```javascript\n{\n  \"libraryName\": \"antd\",\n  \"style\": true,   // or 'css'\n}\n```\n\n```javascript\n{\n  \"libraryName\": \"lodash\",\n  \"libraryDirectory\": \"\",\n  \"camel2DashComponentName\": false,  // default: true\n}\n```\n\n```javascript\n{\n  \"libraryName\": \"material-ui\",\n  \"libraryDirectory\": \"components\",  // default: lib\n  \"camel2DashComponentName\": false,  // default: true\n}\n```\n\n~`options` can be an array.~ It's not available in bable@7+\n\nFor Example: \n\n```javascript\n[\n  {\n    \"libraryName\": \"antd\",\n    \"libraryDirectory\": \"lib\",   // default: lib\n    \"style\": true\n  },\n  {\n    \"libraryName\": \"antd-mobile\"\n  },\n]\n```\n`Options` can't be an array in babel@7+, but you can add plugins with name to support multiple dependencies.\n\nFor Example:\n\n```javascrit\n// .babelrc\n\"plugins\": [\n  [\"import\", { \"libraryName\": \"antd\", \"libraryDirectory\": \"lib\"}, \"ant\"],\n  [\"import\", { \"libraryName\": \"ant-mobile\", \"libraryDirectory\": \"lib\"}, \"ant-mobile\"]\n]\n```\n\n### style\n\n- `[\"import\", { \"libraryName\": \"antd\" }]`: import js modularly\n- `[\"import\", { \"libraryName\": \"antd\", \"style\": true }]`: import js and css modularly (LESS/Sass source files)\n- `[\"import\", { \"libraryName\": \"antd\", \"style\": \"css\" }]`: import js and css modularly (css built files)\n\nIf option style is a `Function`, `babel-plugin-import` will auto import the file which filepath equal to the function return value. This is useful for the components library developers.\n\ne.g. \n- ``[\"import\", { \"libraryName\": \"antd\", \"style\": (name) => `${name}/style/2x` }]``: import js and css modularly & css file path is `ComponentName/style/2x`\n\nIf a component has no style, you can use the `style` function to return a `false` and the style will be ignored.\n\ne.g. \n```js\n[\n  \"import\", \n    { \n      \"libraryName\": \"antd\", \n      \"style\": (name: string, file: Object) => {\n        if(name === 'antd/lib/utils'){\n          return false;\n        }\n        return `${name}/style/2x`;\n      }\n    }\n]\n```\n\n### Note\n\nbabel-plugin-import will not work properly if you add the library to the webpack config [vendor](https://webpack.github.io/docs/code-splitting.html#split-app-and-vendor-code). \n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ant-design/babel-plugin-import.git"
  },
  "scripts": {
    "build": "rm -rf lib && ./node_modules/.bin/babel src --out-dir lib --ignore __tests__",
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "debug": "mocha --require @babel/register --require @babel/polyfill --no-timeouts",
    "lint": "eslint --ext .js src",
    "test": "babel-istanbul cover node_modules/.bin/_mocha  -- --require @babel/register --no-timeouts"
  },
  "version": "1.8.0"
}
